# Workflow
workflows:
  version: 2
  test__trigger:
    jobs:
      - test
      - docker_build_common:
          requires:
            - test
      - docker_build_common_pulseaudio:
          requires:
            - docker_build_common
      - trigger_components:
          requires:
            - docker_build_common
            - docker_build_common_pulseaudio
          filters:
            branches:
              only: master

version: 2
jobs:
  test:
    docker:
      - image: circleci/python:3.6.1
      - image: eclipse-mosquitto:latest
      - image: quay.io/coreos/etcd
        command: 
        - /usr/local/bin/etcd
        - --data-dir=/etcd-data
        - --listen-client-urls=http://0.0.0.0:2379
        - --advertise-client-urls=http://127.0.0.1:2379
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-{{ checksum "test_requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --exists-action s -r requirements.txt --upgrade --force
            pip install -r test_requirements.txt --upgrade
            pip install codeclimate-test-reporter
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            sudo bash -c "echo 'en_US.UTF-8 UTF-8'>> /etc/locale.gen"
            sudo bash -c "echo 'fr_FR.UTF-8 UTF-8' >> /etc/locale.gen"
            sudo locale-gen
            locale -a
            python setup.py develop
            pycodestyle --max-line-length=100 tuxeatpi_common
            pylint --rcfile=.pylintrc -r no tuxeatpi_common
            pytest --html=pytest/report.html --self-contained-html --junit-xml=pytest/junit.xml --cov=tuxeatpi_common/ --cov-report=term --cov-report=html:pytest/coverage/html --cov-report=xml:pytest/coverage/coverage.xml tests 
            coverage combine || true
            coverage report --include='*/tuxeatpi_common/*'
      - store_artifacts:
          path: pytest/
          destination: test_results/
      # Useless for now waiting for update from circleCI UI
      - store_test_results:
          path: pytest/
  docker_build_common:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker based image
          command: |
            docker build -t tuxeatpi/common:latest -f misc/docker/common/Dockerfile .
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
            docker push tuxeatpi/common:latest
  docker_build_common_pulseaudio:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker pulseaudio image
          command: |
            docker build -t tuxeatpi/pulseaudio:latest -f misc/docker/pulseaudio/Dockerfile .
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
            docker push tuxeatpi/pulseaudio:latest
   # Missing circle workflow api
  trigger_components:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - run:
          name: trigger components
          command: |
            curl -X POST https://circleci.com/api/v1.1/project/github/TuxEatPi/brain/`curl          -X GET https://circleci.com/api/v1.1/project/github/TuxEatPi/brain/tree/master?circle-token=$CIRCLE_TOKEN          |jq '.[0].build_num'`/retry?circle-token=$CIRCLE_TOKEN
            curl -X POST https://circleci.com/api/v1.1/project/github/TuxEatPi/hotword-kittai/`curl -X GET https://circleci.com/api/v1.1/project/github/TuxEatPi/hotword-kittai/tree/master?circle-token=$CIRCLE_TOKEN |jq '.[0].build_num'`/retry?circle-token=$CIRCLE_TOKEN
            curl -X POST https://circleci.com/api/v1.1/project/github/TuxEatPi/speech-nuance/`curl  -X GET https://circleci.com/api/v1.1/project/github/TuxEatPi/speech-nuance/tree/master?circle-token=$CIRCLE_TOKEN  |jq '.[0].build_num'`/retry?circle-token=$CIRCLE_TOKEN
            curl -X POST https://circleci.com/api/v1.1/project/github/TuxEatPi/nlu-nuance/`curl     -X GET https://circleci.com/api/v1.1/project/github/TuxEatPi/nlu-nuance/tree/master?circle-token=$CIRCLE_TOKEN     |jq '.[0].build_num'`/retry?circle-token=$CIRCLE_TOKEN
            curl -X POST https://circleci.com/api/v1.1/project/github/TuxEatPi/time/`curl           -X GET https://circleci.com/api/v1.1/project/github/TuxEatPi/time/tree/master?circle-token=$CIRCLE_TOKEN           |jq '.[0].build_num'`/retry?circle-token=$CIRCLE_TOKEN
            #curl -X POST https://circleci.com/api/v1.1/project/github/TuxEatPi/being/`curl          -X GET https://circleci.com/api/v1.1/project/github/TuxEatPi/being/tree/master?circle-token=$CIRCLE_TOKEN           |jq '.[0].build_num'`/retry?circle-token=$CIRCLE_TOKEN
